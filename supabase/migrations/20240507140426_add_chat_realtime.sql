drop policy "Requests are viewable by captains or owners" on "public"."match_requests";

create table "public"."messages" (
    "id" bigint generated by default as identity not null,
    "content" text not null,
    "created_at" timestamp with time zone not null default now(),
    "sender_id" uuid,
    "match_id" bigint
);


alter table "public"."messages" enable row level security;

CREATE UNIQUE INDEX messages_pkey ON public.messages USING btree (id);

alter table "public"."messages" add constraint "messages_pkey" PRIMARY KEY using index "messages_pkey";

alter table "public"."messages" add constraint "public_messages_match_id_fkey" FOREIGN KEY (match_id) REFERENCES matches(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "public_messages_match_id_fkey";

alter table "public"."messages" add constraint "public_messages_sender_id_fkey" FOREIGN KEY (sender_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."messages" validate constraint "public_messages_sender_id_fkey";

grant delete on table "public"."messages" to "anon";

grant insert on table "public"."messages" to "anon";

grant references on table "public"."messages" to "anon";

grant select on table "public"."messages" to "anon";

grant trigger on table "public"."messages" to "anon";

grant truncate on table "public"."messages" to "anon";

grant update on table "public"."messages" to "anon";

grant delete on table "public"."messages" to "authenticated";

grant insert on table "public"."messages" to "authenticated";

grant references on table "public"."messages" to "authenticated";

grant select on table "public"."messages" to "authenticated";

grant trigger on table "public"."messages" to "authenticated";

grant truncate on table "public"."messages" to "authenticated";

grant update on table "public"."messages" to "authenticated";

grant delete on table "public"."messages" to "service_role";

grant insert on table "public"."messages" to "service_role";

grant references on table "public"."messages" to "service_role";

grant select on table "public"."messages" to "service_role";

grant trigger on table "public"."messages" to "service_role";

grant truncate on table "public"."messages" to "service_role";

grant update on table "public"."messages" to "service_role";

create policy "Accepted requests are viewable by everyone"
on "public"."match_requests"
as permissive
for select
to anon, authenticated
using ((status = 'ACCEPTED'::match_request_status));


create policy "Pending/Rejected requests are viewable by captains or owners"
on "public"."match_requests"
as permissive
for select
to authenticated
using (((status <> 'ACCEPTED'::match_request_status) AND ((user_id = auth.uid()) OR (match_id IN ( SELECT matches.id
   FROM matches
  WHERE (matches.owner_id = auth.uid()))))));


create policy "Captains and players can add message"
on "public"."messages"
as permissive
for insert
to authenticated
with check ((match_id IN ( SELECT matches.id
   FROM matches
  WHERE (matches.owner_id = auth.uid())
UNION
 SELECT match_requests.match_id
   FROM match_requests
  WHERE ((match_requests.user_id = auth.uid()) AND (match_requests.status = 'ACCEPTED'::match_request_status)))));


create policy "Captains and players can see messages"
on "public"."messages"
as permissive
for select
to authenticated
using ((match_id IN ( SELECT matches.id
   FROM matches
  WHERE (matches.owner_id = auth.uid())
UNION
 SELECT match_requests.match_id
   FROM match_requests
  WHERE ((match_requests.user_id = auth.uid()) AND (match_requests.status = 'ACCEPTED'::match_request_status)))));




