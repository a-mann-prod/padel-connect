drop policy "Users can update own profile." on "public"."profiles";

create table "public"."favorite_users" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "favorite_user_id" uuid
);


alter table "public"."favorite_users" enable row level security;

CREATE UNIQUE INDEX favorite_users_pkey ON public.favorite_users USING btree (id);

alter table "public"."favorite_users" add constraint "favorite_users_pkey" PRIMARY KEY using index "favorite_users_pkey";

alter table "public"."favorite_users" add constraint "public_favorite_users_favorite_user_id_fkey" FOREIGN KEY (favorite_user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."favorite_users" validate constraint "public_favorite_users_favorite_user_id_fkey";

alter table "public"."favorite_users" add constraint "public_favorite_users_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."favorite_users" validate constraint "public_favorite_users_user_id_fkey";

grant delete on table "public"."favorite_users" to "anon";

grant insert on table "public"."favorite_users" to "anon";

grant references on table "public"."favorite_users" to "anon";

grant select on table "public"."favorite_users" to "anon";

grant trigger on table "public"."favorite_users" to "anon";

grant truncate on table "public"."favorite_users" to "anon";

grant update on table "public"."favorite_users" to "anon";

grant delete on table "public"."favorite_users" to "authenticated";

grant insert on table "public"."favorite_users" to "authenticated";

grant references on table "public"."favorite_users" to "authenticated";

grant select on table "public"."favorite_users" to "authenticated";

grant trigger on table "public"."favorite_users" to "authenticated";

grant truncate on table "public"."favorite_users" to "authenticated";

grant update on table "public"."favorite_users" to "authenticated";

grant delete on table "public"."favorite_users" to "service_role";

grant insert on table "public"."favorite_users" to "service_role";

grant references on table "public"."favorite_users" to "service_role";

grant select on table "public"."favorite_users" to "service_role";

grant trigger on table "public"."favorite_users" to "service_role";

grant truncate on table "public"."favorite_users" to "service_role";

grant update on table "public"."favorite_users" to "service_role";

create policy "Everyone can add to favorite"
on "public"."favorite_users"
as permissive
for insert
to public
with check (true);


create policy "User can update their own favorites"
on "public"."favorite_users"
as permissive
for update
to public
using ((auth.uid() = user_id));


create policy "Users can delete their own favorites"
on "public"."favorite_users"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "Users can view their own favorites"
on "public"."favorite_users"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Users can update their own profile."
on "public"."profiles"
as permissive
for update
to public
using ((auth.uid() = id));




